/// 1884. 鸡蛋掉落 - 两枚鸡蛋
/// 给你 2 枚相同 的鸡蛋，和一栋从第 1 层到第 n 层共有 n 层楼的建筑。
// 已知存在楼层 f ，满足 0 <= f <= n ，任何从 高于 f 的楼层落下的鸡蛋都 会碎 ，
// 从 f 楼层或比它低 的楼层落下的鸡蛋都 不会碎 。
// 每次操作，你可以取一枚 没有碎 的鸡蛋并把它从任一楼层 x 扔下（满足 1 <= x <= n）。
// 如果鸡蛋碎了，你就不能再次使用它。如果某枚鸡蛋扔下后没有摔碎，则可以在之后的操作中 重复使用 这枚鸡蛋。
// 请你计算并返回要确定 f 确切的值 的 最小操作次数 是多少？

/// 情况1 当第一次到k层时 鸡蛋碎 = 最少次数 k - 1; 鸡蛋没碎 = 相当于继续拿两个鸡蛋 完成 n - k 层的操作;
/// f(n) = max{f(k - 1), f(n - k)} + 1;

pub fn two_egg_drop(n: i32) -> i32 {

}

#[test]
fn test_1() {
    assert_eq!(two_egg_drop(2), 2);
}
#[test]
fn test_2() {
    assert_eq!(two_egg_drop(100), 14);
}
/// 887. 鸡蛋掉落
/// 给你 k 枚相同的鸡蛋，并可以使用一栋从第 1 层到第 n 层共有 n 层楼的建筑。
// 已知存在楼层 f ，满足 0 <= f <= n ，任何从 高于 f 的楼层落下的鸡蛋都会碎，
// 从 f 楼层或比它低的楼层落下的鸡蛋都不会破。
// 每次操作，你可以取一枚没有碎的鸡蛋并把它从任一楼层 x 扔下（满足 1 <= x <= n）。
// 如果鸡蛋碎了，你就不能再次使用它。如果某枚鸡蛋扔下后没有摔碎，则可以在之后的操作中 重复使用 这枚鸡蛋。
// 请你计算并返回要确定 f 确切的值 的 最小操作次数 是多少？
///
///
pub fn super_egg_drop(k: i32, n: i32) -> i32 {}

#[test]
fn test_super_1() {
    assert_eq!(super_egg_drop(1, 2), 1);
}
#[test]
fn test_super_2() {
    assert_eq!(super_egg_drop(2, 6), 3);
}
#[test]
fn test_super_3() {
    assert_eq!(super_egg_drop(3, 14), 4);
}
